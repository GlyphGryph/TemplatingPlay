Based on the project requirements, I should do the following:
PART 1: REPLACEMENT
✔ An application runs from the command line
  ✔ - Use #!/usr/bin/env ruby, I think? Yep!
✔ The application runs from the command line with 3 arguments, and outputs the name of those arguments
  ✔ - What happens if we provide greater or fewer arguments? We should raise an error, specifying that we need exactly three arguments to run this application.
  ✔- Should we bother included a help file or man page of some sort? I'll say no, for this. If this was an actual tool people would be using though, including something like this would be a no-brainer.
✔ The application, instead of outputting the final argument, creates a file with the specified name, and includes the first two argument namess as its body
  ✔ - Where is the file created? It will be created in a location relative to the caller. (Luckily, desired behaviour here is default behaviour!)
  ✔ - What happens when that file already exits? For now, we'll throw an error, for safety reasons. There's no reason this app, as is, should be doing anything destructive - scripts or users that call it can be responsible for destroying what needs to be destroyed in a safe way.
  ✔ = We will be using the File/IO library to handle reading in and spitting out files.
  ✔ - What should we do with poorly formed arguments, or arguments that form invalid filenames? By default, our application seems to be able to handle any input passed through bash. For a production application, I'd probably spend a bit more time making sure that was the case, but for now we'll accept the default behaviour.
✔ Create basic test version of documents arguments refer to.
  ✔ = HTML document, page.pnt: <html><body> <* test *> </body></html>
  ✔ = JSON document, data.json: { "test": "This is the basic Test Text." }
✔ The first argument is a file name, and is read into the application and then written to the output file
  ✔ - Where do we look for the file? Relative path from caller, default behaviour.
  ✔ - What happens if the file isn't found? Throw an error, this is already be handled by default when using File to open a file for reading.
  ✔ - What happens if we don't have permission to read the file?
  ✔ - What about the devil known as encoding? We should probably detect mime types. We won't, here, though.
  ✔ - What happens if the file isn't in an expected format? Again, we should probably use a mime type detection library, but for the scope of this project we will ignore this concern.
  ✔ - Should we require appropriate file name endings? No, I don't think that's neccessary.
  ✔ - What happens with large files? Do we pull them all in at once, or incrementally? Do we even worry about this right now? We should generally try to avoid pulling in large files all at once. Howevever, I suspect we will quickly find that becomes inconvenient and will do so anyway (I will try to avoid it until I have to). Were I not explicitly instructed to not waste my weekend over this, I might have decided otherwise.
The second argument is treated as the first, and its body is appended to the output file.
  - Same questions as above. Presumably the same answers as well.
Deserialize the second file into an accessible ruby object, and output the "inspect" for that object instead of the json plaintext.
  = Object should be a hash
  - Should we use some sort of json deserialization library, or attempt to do this by hand?
  - What happens if the format is wrong and the file is invalid json?
  - How do we even tell if that's the case?
  - What happens if the file is valid json, but still isn't shaped the way we expect? (For example, if there's an array at the base level.)
Identity the matched <* *> in the test HTML, and replace every occurence with the value of "test" from the JSON document.
  - What happens if there is an open tag but no closing tag?
  - What happens if there is a closing tag but no paired opening tag?
  - What happens with nested opening tags? How are they recognized or ignored?
  - What happens if the JSON document doesn't have the "test" value?
  - What happens if the value of the chosen key is not text?
  = Update page.pnt with a second <* test *> element, and make sure the application replaces both elements.
  = Ignore any values in the json that aren't used.
  = Make sure to trim whitespace in the html, <*test*>, <* test*> and <*test    *> should all function properly.
Insure this works with JSON that have multiple values and .pnt files with multiple value calls
  = Update page.pnt: <html><body><p>1: <* test1 *></p><p>2: <* test2 *></p></body></html>
  = Update data.json: { "test1": "This is the first test text.", "test2": "This is the second test text."}
Nesting: When we detect a period in our tagged content, split on the period and search down the json tree for the value.
  - Should we trim whitespace of the new values? No, the initial trim is enough.
  = Update page.pnt, add a <* test3.foo *> and a <* test3.bar *>
  = Update data.json, add "test3": {"foo": "This is Foo", "bar": "This is Bar"}
  - What should we do if the .pnt just calls "test3", here?
  - Should we allow for any amount of nesting? Yes, seems just as easy so why not. A general solution could also handle our solo case.

PART 2: LOGIC
Implement EACH logic, in the format <* EACH object.path new_name_of_target*>
  = Update page.pnt to the provided template.panoramatemplate file contents.
  = Update data.json to the provided data.json file contents.
  
  Recognize the first element for the keyword EACH and ENDEACH. If this is found, ignore from here to the matched ENDEACH
    - How do we identity EACHes? Do we parse through the document and check for such logic first, flattening it out, or do we do it in the same run by breaking every tag into objects and then processing them? For our initial run, let's do multiple passes to flatten out the logic.
    - How do we detect EACH pairs, since they can be nested and we can not simply stop at the first ENDEACH?
    - What do we do with an unmatched EACH or ENDEACH?
  
  When we recognize an EACH/ENDEACH pair, instead of ignoring it, replace it with the contents of the EACH block repeated 'n' times, where 'n' is the size of the associated array of the matched text that appears after the EACH keyword, separated by one or more spaces from EACH. Do this for nested EACH pairs as well.
    - What should we do with any extra arguments?
    - What should we do if we're only given an <* EACH *> without an argument?
    = We should trim the two space separated elements.
    - What do we do if the associated value isn't an array?
    = Replace any <* element *> tags within the newly flattened sections by value of the array at the same 'n' index.
    - When we process EACH pairs, should we do it from the outside in or the inside out?

  When we flatten an EACH loop, recognize and accept a third "argument". When flattening, replace the <* element *> matching above with matching of this third argument instead.
    - What do we do if we have less than three arguments?
    - By this point, we'll have odd rules on spaces - for non EACH tags, spaces are stripped if leading and trailing, but internal spaces are seen as part of the variable name. <* hoo hah.foo *> matches {"hoo hah" => {"foo" => "value"}}. Might we want to strictly enforce the idea of no internal spacing except where logically meaningful? What do we do with extra arguments?
    - What do we do if nested EACH's both use the same third argument?
    - What do we do if the third argument is a value already in the json?
    - Do we make the text substitution directly, or simply replace it with a tag the replace logic can use to find the right value? In light of the final requirement for this step, the second would probably be a good idea.
      = Recommended path forward: Adopt an additional syntax, '['+digit+']' for identifying an element by index when it's part of an array. For example, "foo[1][3].bar.greb[2]" Obviously, this introduces more error handling and documentation if we choose to expose this to the public, and barring the public from using square brackets in their variable names if we do not.

  Replace tags that lead with the named EACH element context with the correct version of their values
    - Lots of different ways to do this, lots of concerns. Will expand this section when we get closer.

#!/usr/bin/env ruby
require 'json'

if(ARGV.length != 3)
  raise ArgumentError, "Provide exactly 3 arguments."
end
if(File.exist?(ARGV[2]))
  raise IOError, "Could not create output file. File \"#{ARGV[2]}\" already exists."
end

######################
# CLASS DECLARATIONS #
######################

class Document
  attr_accessor :body, :data

  def initialize(file_name, data_file)
    @data = DataObject.new(ARGV[1])
    source_text = ""
    File.open(file_name, "r") do |file|
      source_text = file.read
    end
    @body = []
    self.parse_remainder(source_text)
  end

  def parse_remainder(text)
    plaintext_chunk, found_tag, remainder = text.partition(/<\*.*?\*>/)
    if(!plaintext_chunk.empty?)
      @body << TextElement.new(plaintext_chunk)
    end
    if(!found_tag.empty?)
      @body << self.element_from_tag(found_tag)
    end
    if(!remainder.empty?)
      self.parse_remainder(remainder)
    end
  end

  def element_from_tag(tag)
    # Extract the text inside the delimiters
    tag = tag.slice(2..-3)
    # Separate content into 'words' separated by spaces, and strip surrounding whitespace of words
    words = tag.split(" ").map do |word|
      word.strip
    end

    # If the first element's first word is "EACH", set type to 'start_each' and remove it
    # If the first element's first word is "ENDEACH", set type to 'end_each' and remove it
    # Otherwise, set type to 'eval'
    if("EACH" == words[0])
      if(words.length != 3)
        raise "Template Error: EACH statements require exactly two arguments, a target array and a variable to use as context for inside the loop."
      end
      target = self.chain_from_path(words[1])
      context = words[2]

      return StartEachElement.new(target, context)
    elsif("ENDEACH" == words[0])
      if(words.length > 1)
        raise "Template Error: ENDEACH statements cannot take arguments."
      end
      return EndEachElement.new
    elsif(words.length > 1)
      raise "Template Error: Could not figure out the logic for '#{words.join(" ")}'. Did you really intend to use spaces, here?"
    else
      return EvalElement.new(self.chain_from_path(words.first))
    end
  end

  # This turns a dot separated path into an array of keys
  def chain_from_path(path)
    chain = path.split(".") do |key|
      key.strip
    end
    return chain
  end
end


class DataObject
  def initialize(file_name)
    File.open(file_name, "r") do |file|
      @data = JSON.parse(file.read)
    end
    unless(@data.is_a?(Hash))
      raise IOError, "JSON Error: #{ARGV[1]} was not a valid data file for this operation, root must be an Object." 
    end
  end

  # Find an element from the JSON, given a path array
  def find(chain, from=@data, history=[])
    key = chain.first
    chain = chain.slice(1..-1)
    if(key.is_a?(String))
      unless(from.is_a?(Hash))
        raise "Template Error: '#{(history).join('.')}' was not an object."
      end
    elsif(key.is_a?(Integer))
      unless(from.is_a?(Array))
        raise "Template Error: '#{(history).join('.')}' was not an array."
      end
    else
      raise "Internal Error: Unexpected key value."
    end

    value_for_found = from[key]
    history << key
    if(value_for_found.nil?)
      raise "Template Error: Could not find a value for '#{(history).join('.')}'."
    elsif(!chain.empty?)
      return self.find(chain, value_for_found, history)
    else
      return value_for_found
    end
  end
end

class TextElement
  attr_reader :value
  
  def initialize(value)
    @value = value
  end
end

class StartEachElement
  attr_reader :path, :element_name
  def initialize(path, element_name)
    @path = path
    # Raise an error if the context contains a period - this is context variable, and that would be invalid
    if(element_name.include?("."))
      raise "Template Error: EACH statements cannot have their values assigned to a variable chain."
    end
    @element_name = element_name
  end
end

class EndEachElement
  def initialize
  end
end

class EachElement
  def initialize
  end
end

class EvalElement
  attr_reader :path
  def initialize(path)
    @path = path
  end
end

################
# SCRIPT LOGIC #
################


document = Document.new(ARGV[0], ARGV[1])

# Crawl through the document and remove EACH/ENDEACH pairs, and everything inside them, from the document flow
nested_content = [{:content => []}]
document.body.each do |element|
  if(element.is_a?(StartEachElement))
    # When we encounter an EACH, find the associated value
    found_array = document.data.find(element.path)
    if(!found_array.is_a?(Array))
      raise "Template Error: '#{elemen.path}' is not an array. EACH only works with arrays."
    end
    nested_content << {:duplicates => found_array.length, :content => [], :replace => element.element_name, :with => element.path}
  elsif(element.is_a?(EndEachElement))
    # When we encounter an ENDEACH, execute the associated loop
    if(nested_content.length <= 1)
      raise "Template Error: Unmatched ENDEACH."
    else
      newest_loop = nested_content.pop
      # Replace any elements with a fully expanded path to the current array element, and then add to the parent content
      newest_loop[:duplicates].times do |index|
        content_iteration = []
        newest_loop[:content].each do |inner_element|
          if( inner_element.is_a?(EvalElement) && inner_element.path.first == newest_loop[:replace] )
            ending = inner_element.path.slice(1..-1)
            new_path = newest_loop[:with]+[index]+ending
            content_iteration << EvalElement.new(new_path)
          else
            content_iteration << inner_element
          end
        end
        nested_content.last[:content] = nested_content.last[:content].concat(content_iteration)
      end
    end

  else
    # Otherwise, insert the value into the current content
    nested_content.last[:content] << element
  end
end

if(nested_content.length > 1)
  raise "Template Error: Unmatched EACH"
end

document.body = nested_content.pop[:content]

# Crawl through the document and conduct replacements
document.body.each_with_index do |element, index|
  if(element.is_a?(EvalElement))
    string_found = document.data.find(element.path)
    if(string_found.is_a?(String))
      document.body[index] = TextElement.new(string_found)
    else
      raise "Template Error: Value for '#{element.path}' was not a String."
    end
  end
end

# Convert the document structure back to flat plaintext
html_text = document.body.map{|element| element.value}.join("")

# Write output
printf html_text
#File.open(ARGV[2], "w") do |file|
#  file.write(html_object.join(""))
#end


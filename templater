#!/usr/bin/env ruby
require 'json'

if(ARGV.length != 3)
  raise ArgumentError, "Provide exactly 3 arguments."
end
if(File.exist?(ARGV[2]))
  raise IOError, "Could not create output file. File \"#{ARGV[2]}\" already exists."
end

# Get html data
html_text = ""
File.open(ARGV[0], "r") do |file|
  html_text = file.read
end

# Get json
data_object = {}
File.open(ARGV[1], "r") do |file|
  data_object = JSON.parse(file.read)
end
if(!data_object.is_a?(Hash))
  raise IOError, "JSON Error: #{ARGV[1]} was not a valid data file for this operation, root must be an Object." 
end

# Parse a lookup from the json
def find_nested_value(chain, from, history=[])
  value_for_found = from[chain.first]
  if(value_for_found.nil?)
    raise "Template Error: Could not find a value for '#{(history << chain.first).join('.')}'."
  elsif(value_for_found.is_a?(Hash))
    history << chain.shift
    if(chain.empty?)
      raise "Template Error: Expected value for '#{(history << chain.first).join('.')}' to be a string, but it was an object."
    end
    return find_nested_value(chain, value_for_found, history)
  else
    return value_for_found
  end
end

# Break up html file into a document with structure
html_document = []
remainder = html_text
finished = false
until(finished)
  # Break the unparsed section of the file into three pieces, before, after, and equal to the next tag
  partition_result = remainder.partition(/<\*.*?\*>/)
  # Save the first element to our object as type 'text'
  html_document << {:type => 'text', :value => partition_result[0]}

  # Save the second element to our object as type "eval"
  found = partition_result[1]
  if(!found.empty?)
    # Remove the tag openers and closes
    found = found.slice(2..-3)
    found.strip!
    words = found.split(" ")
    words.map! do |word|
      word = word.strip.split(".")
    end
    # If the first element's first word is "EACH", set type to 'start_each' and remove it
    # If the first element's first word is "ENDEACH", set type to 'end_each' and remove it
    # Otherwise, set type to 'eval'
    # Undo our previous split for the first word only - this should not do anything unless the template is wrong
    first_word = words.first.join(".")
    if("EACH" == first_word)
      # We already know what the first argument is, so dump it
      words.shift
      html_document << {:type => 'start_each', :value => words}
    elsif("ENDEACH" == first_word)
      words.shift
      html_document << {:type => 'end_each', :value => words}
    elsif(words.length > 1)
      raise "Template Error: Could not figure out the logic for '#{words.flatten}'. Did you really intend to use spaces, here?"
    else
      html_document << {:type => 'eval', :value => words.first}
    end
  else
    finished = true
  end
  remainder = partition_result[2]
  if(remainder.empty?)
    finished=true
  end
end

# Crawl through the document and remove EACH/ENDEACH pairs, and everything inside them, from the document flow
extracted_loop_content = []
depth = 0
outside_loop = true
duplicates = 1
tmp_html_document = []
html_document.each do |element|
  if('start_each' == element[:type])
    if(depth < 1)
      # Start tracking the contents for repeating
      found_array = find_nested_value(element[:value].first, data_object)
      if(found_array.is_a?(Array))
        duplicates = found_array.length
      else
        raise "Template Error: '#{element[:value]}' is not an array. EACH only works with arrays."
      end
    end
    depth += 1
    outside_loop = false
  elsif('end_each' == element[:type])
    if(depth < 1)
      raise "Template Error: Unmatched ENDEACH."
    else
      depth -= 1
      if(depth < 1)
        outside_loop = true
        duplicates.times do
          tmp_html_document = tmp_html_document.concat(extracted_loop_content)
        end
        duplicates = 1
      end
    end
  else
    if(outside_loop)
      tmp_html_document << element
    else
      extracted_loop_content << element
    end
  end
end
if(depth > 0)
  raise "Template Error: Unmatched EACH"
end
html_document = tmp_html_document

# Crawl through the document and conduct replacements
html_document.each_with_index do |element, index|
  if('eval' == element[:type])
    string_found = find_nested_value(element[:value], data_object)
    if(string_found.is_a?(String))
      html_document[index] = {:type => 'text', :value => string_found}
    else
      raise "Template Error: Value for '#{found}' was not a String."
    end
  end
end

# Convert the document structure back to flat plaintext
html_text = html_document.map{|element| element[:value]}.join("")

# Write output
p html_text
#File.open(ARGV[2], "w") do |file|
#  file.write(html_object.join(""))
#end

#!/usr/bin/env ruby
require 'json'

if(ARGV.length != 3)
  raise ArgumentError, "Provide exactly 3 arguments."
end

######################
# CLASS DECLARATIONS #
######################

class Document
  attr_accessor :body, :data

  def initialize(file_name, data_file)
    @data = DataObject.new(ARGV[1])
    source_text = ""
    File.open(file_name, "r") do |file|
      source_text = file.read
    end
    @prebody = []
    self.parse_remainder(source_text)
    self.grow_tree(@prebody)
  end

  def parse_remainder(text)
    plaintext_chunk, found_tag, remainder = text.partition(/<\*.*?\*>/)
    if(!plaintext_chunk.empty?)
      @prebody << TextElement.new(plaintext_chunk)
    end
    if(!found_tag.empty?)
      @prebody << self.element_from_tag(found_tag)
    end
    if(!remainder.empty?)
      self.parse_remainder(remainder)
    end
  end

  # Turn each StartEachElement / EndEachElement pair into a single EachElement, containing it's tree
  def grow_tree(nodes)
    @body = DocumentElement.new(@data)
    nodes.each do |element|
      @body.feed(element)
    end
  end

  def element_from_tag(tag)
    # Extract the text inside the delimiters
    tag = tag.slice(2..-3)
    # Separate content into 'words' separated by spaces, and strip surrounding whitespace of words
    words = tag.split(" ").map do |word|
      word.strip
    end

    # If the first element's first word is "EACH", set type to 'start_each' and remove it
    # If the first element's first word is "ENDEACH", set type to 'end_each' and remove it
    # Otherwise, set type to 'eval'
    if("EACH" == words[0])
      if(words.length != 3)
        raise "Template Error: EACH statements require exactly two arguments, a target array and a variable to use as context for inside the loop."
      end
      target = self.chain_from_path(words[1])
      context = words[2]

      return StartEachElement.new(target, context)
    elsif("ENDEACH" == words[0])
      if(words.length > 1)
        raise "Template Error: ENDEACH statements cannot take arguments."
      end
      return EndEachElement.new
    elsif(words.length > 1)
      raise "Template Error: Could not figure out the logic for '#{words.join(" ")}'. Did you really intend to use spaces, here?"
    else
      return EvalElement.new(self.chain_from_path(words.first))
    end
  end

  # This turns a dot separated path into an array of keys
  def chain_from_path(path)
    chain = path.split(".") do |key|
      key.strip
    end
    return chain
  end

  def get_html
    return @body.get_html(@data)
  end
end


class DataObject
  def initialize(file_name)
    File.open(file_name, "r") do |file|
      @data = JSON.parse(file.read)
    end
    unless(@data.is_a?(Hash))
      raise IOError, "JSON Error: #{ARGV[1]} was not a valid data file for this operation, root must be an Object." 
    end
  end

  # Find an element from the JSON, given a path array
  def find(chain, from=@data, history=[])
    key = chain.first
    chain = chain.slice(1..-1)
    if(key.is_a?(String))
      unless(from.is_a?(Hash))
        raise "Template Error: '#{(history).join('.')}' was not an object."
      end
    elsif(key.is_a?(Integer))
      unless(from.is_a?(Array))
        raise "Template Error: '#{(history).join('.')}' was not an array."
      end
    else
      raise "Internal Error: Unexpected key value."
    end

    value_for_found = from[key]
    history << key
    if(value_for_found.nil?)
      raise "Template Error: Could not find a value for '#{(history).join('.')}'."
    elsif(!chain.empty?)
      return self.find(chain, value_for_found, history)
    else
      return value_for_found
    end
  end
end

class TextElement
  attr_reader :value
  
  def initialize(value)
    @value = value
  end
  
  def get_html(data)
    return @value
  end
end

class StartEachElement
  attr_reader :path, :element_name
  def initialize(path, element_name)
    @path = path
    # Raise an error if the context contains a period - this is context variable, and that would be invalid
    if(element_name.include?("."))
      raise "Template Error: EACH statements cannot have their values assigned to a variable chain."
    end
    @element_name = element_name
  end
end

class EndEachElement
  def initialize
  end
end

class EvalElement
  attr_reader :path

  def initialize(path)
    @path = path
  end

  def get_html(data)
    found = data.find(path)
    if(found.is_a?(String))
      return found
    else
      raise "Template Error: Value for '#{element.path}' was not a String."
    end
  end
end

class DocumentElement
  attr_reader :children, :path
  def initialize(data, path=nil, context_element=nil)
    @children = []
    @open = true
    # Active node is the value of any open nested node, if one exists
    @active_nodes = nil
    @path = path
    @context_element = context_element
    @data = data
  end

  def active?
    return @active_nodes
  end
  
  def feed(node)
    # If we have an active child DocumentElement, simply pass this through
    if(self.active?)
      # If this is an end node, and the child nodes are not active
      # Then stop feeding child nodes
      if(node.is_a?(EndEachElement) && @active_nodes.first && !@active_nodes.first.active?)
        @active_nodes = nil
      else
        @active_nodes.each do |active_node|
          active_node.feed(node)
        end
      end
    else
      if(node.is_a?(StartEachElement))
        @active_nodes = []
        full_path = node.path.clone
        if(full_path.first == @context_element)
          full_path = @path+full_path.slice(1..-1)
        end
        target_array = @data.find(full_path)
        target_array.each_with_index do |array_element, index|
          new_path = full_path.clone
          new_path = new_path+[index]
          @active_nodes << DocumentElement.new(@data, new_path, node.element_name)
        end
        @children.concat(@active_nodes)
      elsif(node.is_a?(EndEachElement))
        # If we encounter this on a root DocumentElement, and don't pass it through, we have no matched StartEachElement
        raise "Template Error: Unmatched ENDEACH."
      else
        @children << node
      end
    end
    # We return true to let our owner know to continue feeding us, we haven't reached an end yet
    return true
  end

  def get_html(data)
    html = ""
    self.flatten_elements(data).each do |element|
      html += element.get_html(data)
    end
    return html
  end

  def flatten_elements(data)
    flattened_elements = []
    @children.each do |element|
      if(element.is_a?(StartEachElement))
        raise "Template Error: Unmatched EACH element."
      elsif(element.is_a?(EndEachElement))
        raise "Template Error: Unmatched ENDEACH element."
      elsif(element.is_a?(DocumentElement))
        element.flatten_elements(data).each do |nested_element|
          flattened_elements << nested_element
        end
      elsif(element.is_a?(EvalElement) && @path)
        new_path = element.path
        if(element.path.first == @context_element)
          new_path = @path+element.path.slice(1..-1)
        end
        flattened_elements << EvalElement.new(new_path)
      else
        flattened_elements << element
      end
    end
    return flattened_elements
  end
end

################
# SCRIPT LOGIC #
################

document = Document.new(ARGV[0], ARGV[1])

# Write output
File.open(ARGV[2], "w") do |file|
  file.write(document.get_html)
end

